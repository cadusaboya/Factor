# Use an appropriate base image
FROM python:3.12.3

# Set build arguments
ARG DJANGO_SECRET_KEY
ARG DJANGO_DEBUG
ARG DATABASE_NAME
ARG DATABASE_USER
ARG DATABASE_PASSWORD
ARG DATABASE_HOST
ARG DATABASE_PORT
ARG EMAIL_HOST
ARG EMAIL_PORT
ARG EMAIL_USE_SSL
ARG EMAIL_USE_TLS
ARG EMAIL_HOST_USER
ARG EMAIL_HOST_PASSWORD
ARG ALLOWED_HOSTS
ARG CORS_ALLOWED_ORIGIN_REGEXES

# Set environment variables
ENV DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
ENV DJANGO_DEBUG=$DJANGO_DEBUG
ENV DATABASE_NAME=$DATABASE_NAME
ENV DATABASE_USER=$DATABASE_USER
ENV DATABASE_PASSWORD=$DATABASE_PASSWORD
ENV DATABASE_HOST=$DATABASE_HOST
ENV DATABASE_PORT=$DATABASE_PORT
ENV EMAIL_HOST=$EMAIL_HOST
ENV EMAIL_PORT=$EMAIL_PORT
ENV EMAIL_USE_SSL=$EMAIL_USE_SSL
ENV EMAIL_USE_TLS=$EMAIL_USE_TLS
ENV EMAIL_HOST_USER=$EMAIL_HOST_USER
ENV EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
ENV ALLOWED_HOSTS=$ALLOWED_HOSTS
ENV CORS_ALLOWED_ORIGIN_REGEXES=$CORS_ALLOWED_ORIGIN_REGEXES

# Set the working directory in the container
WORKDIR /app

# Install any system dependencies, if needed

# Copy the requirements file into the container at /app
COPY requirements.txt ./

# Install Python dependencies
RUN pip install -r requirements.txt

# Copy the backend application code into the container at /app
COPY . .

# Expose port 8000 to the outside world
EXPOSE 8000

# Command to run the backend application
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]